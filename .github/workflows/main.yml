name: Healthcare CI/CD Pipeline
run-name: ${{ github.actor }} is running the Healthcare CI/CD Pipeline üè•

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Create build directories
        run: |
          mkdir -p build/classes
          mkdir -p build/test-classes
          mkdir -p build/reports/jacoco

      # Compile healthcare core components first
      - name: Compile Healthcare Core
        run: |
          javac -d build/classes \
          -cp "libs/*" \
          $(find src/main/healthcare -name "*.java")

      # Compile models
      - name: Compile Models
        run: |
          javac -d build/classes \
          -cp "libs/*:build/classes" \
          $(find src/main/models -name "*.java")

      # Compile test framework
      - name: Compile Test Framework
        run: |
          javac -d build/test-classes \
          -cp "libs/*:build/classes" \
          $(find src/test/framework -name "*.java")

      # Compile test classes
      - name: Compile Tests
        run: |
          javac -d build/test-classes \
          -cp "libs/*:build/classes:build/test-classes" \
          $(find src/test -name "*.java" ! -path "*/framework/*")

      # Run Security Scan
      - name: Security Scan
        run: |
          echo "Running security scan..."
          # Add actual security scanning tool here

      # Run Tests with JaCoCo
      - name: Run Tests
        run: |
          java -javaagent:libs/jacocoagent.jar=destfile=build/reports/jacoco/jacoco.exec \
          -cp "libs/*:build/classes:build/test-classes" \
          org.junit.runner.JUnitCore \
          test.healthcare.IntegrationTest \
          test.healthcare.SecurityTest \
          test.models.PatientTest \
          test.models.MedicalTeamTest

      # Generate JaCoCo Report
      - name: Generate JaCoCo Report
        run: |
          java -jar libs/jacococli.jar report build/reports/jacoco/jacoco.exec \
          --classfiles build/classes \
          --sourcefiles src/main \
          --html build/reports/jacoco/html \
          --xml build/reports/jacoco/jacoco.xml \
          --csv build/reports/jacoco/jacoco.csv

      # Upload JaCoCo Reports
      - name: Upload JaCoCo Reports
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-reports
          path: build/reports/jacoco/html/

      # Set up Docker on the runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image
      - name: Build Docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/project3:latest .

      # Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{secrets.DOCKER_USERNAME}}/project3:latest 

      # Deploy to a remote server (optional)
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22000
          script: |
            echo ${{secrets.SSH_PASSWORD}} | sudo -S apt update
            sudo apt install apt-transport-https ca-certificates curl gnupg -y
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$UBUNTU_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo -S apt update
            sudo -S apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

            echo "Docker installed."
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/project3:latest 
            sudo docker stop project3_container || true
            sudo docker rm project3_container || true
            sudo docker run -d --name project3_container -p 22:22 ${{secrets.DOCKER_USERNAME}}/project3:latest 

      # Report status
      - name: Report status
        if: always()
        run: echo "üè• Pipeline status is ${{ job.status }}"